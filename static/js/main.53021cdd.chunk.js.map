{"version":3,"sources":["App.module.scss","components/visualizer/visualizer.module.scss","components/counter/counter.module.scss","components/block/block.module.scss","components/select/select.module.scss","components/button/button.module.scss","components/select/select.jsx","components/button/button.jsx","components/hooks/useInterval.js","components/hooks/useScheduler.js","components/visualizer/visualizer.jsx","utils/constants.js","components/block/block.jsx","components/counter/counter.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","select","options","onChange","hasObjects","className","styles","map","option","key","value","label","Button","onClick","disabled","button","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","getInboundRows","timeline","split","processString","index","processInfo","arrival","Number","duration","consumed","useScheduler","algorithm","started","setStarted","useState","inboundRows","setInboundRows","doneBlocks","setDoneBlocks","stepCount","setStepCount","readyQueue","setReadyQueue","timeQuantum","setTimeQuantum","lowPriorityQueue","setLowPriorityQueue","highPriorityQueue","setHighPriorityQueue","waitTimes","setWaitTimes","step","length","pickedRow","egibleRows","filter","row","sort","r1","r2","queue","slice","resetTime","forEach","includes","push","lastJob","shift","find","indexOf","splice","arrivingRows","highPriorityArrivingRows","lowPriorityArrivingRows","highPriorityRows","queueRow","inboundRow","concat","lowPriorityRows","console","log","Upcoming","rows","blockSize","upcoming","blocks","Array","fill","blockRow","size","inbound","isInvisible","Done","done","reverse","Visualizer","algo","visualizer","spacer","count","algoOptions","timelineOptions","colors","Block","classnames","block","style","background","width","height","margin","Counter","counter","number","average","Math","round","reduce","total","num","App","setAlgo","setTimeline","customTimeline","setCustomTimeline","error","setError","onCustomTimelineChange","job","Error","err","message","scheduler","header","title","controls","target","onBlur","e","onKeyPress","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.53021cdd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"scheduler\":\"App_scheduler__1vHEb\",\"header\":\"App_header__2L3DO\",\"controls\":\"App_controls__2MSL9\",\"timeline\":\"App_timeline__1jgvV\",\"customTimeline\":\"App_customTimeline__LuqHI\",\"error\":\"App_error__1LS0k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"visualizer\":\"visualizer_visualizer__IqrZE\",\"spacer\":\"visualizer_spacer__3dKCK\",\"upcoming\":\"visualizer_upcoming__2_bjx\",\"blockRow\":\"visualizer_blockRow__G0RKM\",\"done\":\"visualizer_done__3FhrQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"counter_counter__3ZU8z\",\"average\":\"counter_average__308Qt\",\"number\":\"counter_number__QGA_A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"block_block__2bW7g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"select_select__XlnEk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__H5057\"};","import React from 'react';\n\nimport styles from './select.module.scss';\n\nconst select = ({ options = [], onChange }) => {\n  const hasObjects = typeof options[0] === 'object';\n\n  return (\n    <select onChange={onChange} className={styles.select}>\n      {options.map(option =>\n        hasObjects ? (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ) : (\n          <option key={option}>{option}</option>\n        )\n      )}\n    </select>\n  );\n};\n\nexport default select;\n","import React from 'react';\n\nimport styles from './button.module.scss';\n\nconst Button = ({ label, onClick, disabled }) => (\n  <button className={styles.button} disabled={disabled} onClick={onClick}>\n    {label}\n  </button>\n);\n\nexport default Button;\n","import { useEffect, useRef } from 'react';\n\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;","import { useState, useEffect } from 'react';\nimport { useInterval } from '.';\n\nconst getInboundRows = timeline => {\n  const inboundRows = timeline.split(';').map((processString, index) => {\n    const processInfo = processString.split(',');\n    const arrival = Number(processInfo[0]);\n    const duration = Number(processInfo[1]);\n    return {\n      arrival,\n      duration,\n      consumed: 0,\n      id: index + 1\n    };\n  });\n\n  return inboundRows;\n};\n\nconst useScheduler = (timeline, algorithm, started, setStarted) => {\n  const [inboundRows, setInboundRows] = useState(getInboundRows(timeline));\n  const [doneBlocks, setDoneBlocks] = useState([]);\n  const [stepCount, setStepCount] = useState(0);\n\n  const [readyQueue, setReadyQueue] = useState([]);\n  const [timeQuantum, setTimeQuantum] = useState(0);\n\n  const [lowPriorityQueue, setLowPriorityQueue] = useState([]);\n  const [highPriorityQueue, setHighPriorityQueue] = useState([]);\n\n  const [waitTimes, setWaitTimes] = useState([]);\n\n  const step = () => {\n    if (inboundRows.length === 0) {\n      setStarted(false);\n      return;\n    }\n\n    let pickedRow;\n\n    const egibleRows = inboundRows.filter(row => stepCount >= row.arrival);\n\n    if (egibleRows.length >= 1) {\n      switch (algorithm) {\n        case 'FCFS':\n          egibleRows.sort((r1, r2) => r1.arrival - r2.arrival);\n          pickedRow = egibleRows[0];\n          break;\n        case 'SRTF':\n          egibleRows.sort(\n            (r1, r2) =>\n              r1.duration - r1.consumed - (r2.duration - r2.consumed) ||\n              r2.consumed - r1.consumed\n          );\n          pickedRow = egibleRows[0];\n          break;\n        case 'RR':\n          let queue = readyQueue.slice(0);\n          let resetTime = false;\n\n          egibleRows.forEach(row => {\n            if (!queue.includes(row.id)) queue.push(row.id);\n          });\n\n          if (timeQuantum === 4) {\n            const lastJob = queue.shift();\n            queue.push(lastJob);\n            resetTime = true;\n          }\n\n          queue.forEach(id => {\n            const job = egibleRows.find(row => row.id === id);\n            if (!job) {\n              const index = queue.indexOf(id);\n              queue.splice(index, 1);\n              if (index === 0) resetTime = true;\n            }\n          });\n\n          pickedRow = egibleRows.find(row => row.id === queue[0]);\n\n          setTimeQuantum(resetTime ? 1 : timeQuantum + 1);\n          setReadyQueue(queue);\n\n          break;\n\n        case 'FCFS2':\n          const arrivingRows = inboundRows.filter(\n            row => row.arrival === stepCount\n          );\n          const highPriorityArrivingRows = arrivingRows.filter(\n            row => row.duration <= 5\n          );\n          const lowPriorityArrivingRows = arrivingRows.filter(\n            row => row.duration > 5\n          );\n\n          const highPriorityRows = highPriorityQueue\n            .map(queueRow => {\n              const row = egibleRows.find(\n                inboundRow => inboundRow.id === queueRow.id\n              );\n              return row || null;\n            })\n            .concat(highPriorityArrivingRows)\n            .filter(row => row !== null)\n            .filter(row => row.duration - row.consumed !== 0);\n\n          const lowPriorityRows = lowPriorityQueue\n            .map(queueRow => {\n              const row = egibleRows.find(\n                inboundRow => inboundRow.id === queueRow.id\n              );\n              return row || null;\n            })\n            .concat(lowPriorityArrivingRows)\n            .filter(row => row !== null)\n            .filter(row => row.duration - row.consumed !== 0);\n\n          if (highPriorityRows.length > 0) {\n            pickedRow = highPriorityRows[0];\n          } else if (lowPriorityRows.length > 0) {\n            pickedRow = lowPriorityRows[0];\n          }\n\n          setHighPriorityQueue(highPriorityRows);\n          setLowPriorityQueue(lowPriorityRows);\n          break;\n        default:\n          console.log('This is not quite right');\n      }\n    }\n\n    if (pickedRow) {\n      setDoneBlocks(doneBlocks.concat(pickedRow.id));\n\n      setInboundRows(\n        inboundRows\n          .map(row =>\n            row.id === pickedRow.id\n              ? {\n                  ...row,\n                  consumed: row.consumed + 1\n                }\n              : row\n          )\n          .filter(row => {\n            if (row.consumed < row.duration) {\n              return true;\n            }\n\n            setWaitTimes(waitTimes.concat([stepCount - row.arrival + 1 - row.duration]));\n            return false;\n          })\n      );\n    }\n    setStepCount(stepCount + 1);\n  };\n\n  useEffect(() => {\n    if (started) {\n      setInboundRows(getInboundRows(timeline));\n      setDoneBlocks([]);\n      setStepCount(0);\n      setTimeQuantum(0);\n      setReadyQueue([]);\n      setLowPriorityQueue([]);\n      setHighPriorityQueue([]);\n      setWaitTimes([]);\n    }\n  }, [started, timeline]);\n\n  useEffect(() => {\n    setInboundRows(getInboundRows(timeline));\n    setDoneBlocks([]);\n    setStepCount(0);\n    setTimeQuantum(0);\n    setReadyQueue([]);\n    setLowPriorityQueue([]);\n    setHighPriorityQueue([]);\n    setWaitTimes([]);\n  }, [timeline, algorithm]);\n\n  useInterval(\n    () => {\n      step();\n    },\n    started ? 1000 : null\n  );\n\n  return {\n    inboundRows,\n    doneBlocks,\n    stepCount,\n    waitTimes\n  };\n};\n\nexport default useScheduler;\n","import React from 'react';\n\nimport { Block, Counter } from '..';\nimport { useScheduler } from '../hooks';\n\nimport styles from './visualizer.module.scss';\n\nconst Upcoming = ({ stepCount, rows, blockSize }) => {\n  return (\n    <div className={styles.upcoming}>\n      {rows.map((row, index) => {\n        let blocks = Array(row.duration - row.consumed).fill(row.id);\n        if (row.arrival > stepCount)\n          blocks = Array(row.arrival - stepCount)\n            .fill(false)\n            .concat(blocks);\n        return (\n          <div key={index} className={styles.blockRow}>\n            {blocks.map((value, index) => (\n              <Block size={blockSize} key={`${index}${value}`} value={value} inbound isInvisible={!value} />\n            ))}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst Done = ({ doneBlocks, blockSize }) => (\n  <div className={styles.done}>\n    {doneBlocks.slice(0).reverse().map((value, index) => (\n      <Block size={blockSize} value={value} key={`${index}${value}`} />\n    ))}\n  </div>\n);\n\nconst Visualizer = ({ timeline, algo, started, setStarted }) => {\n  const { inboundRows, doneBlocks, stepCount, waitTimes } = useScheduler(\n    timeline,\n    algo,\n    started,\n    setStarted,\n  );\n\n  const blockSize = 250 / timeline.split(';').length;\n\n  return (\n    <>\n      <div className={styles.visualizer}>\n        <Upcoming blockSize={blockSize} rows={inboundRows} stepCount={stepCount} />\n        <div className={styles.spacer} />\n        <Done blockSize={blockSize} doneBlocks={doneBlocks} />\n      </div>\n      <Counter started={started} waitTimes={waitTimes} count={stepCount} />\n    </>\n  );\n};\n\nexport default Visualizer;\n","export const algoOptions = [\n  {\n    label: 'First Come First Serve (FCFS)',\n    value: 'FCFS'\n  },\n  {\n    label: 'Smallest Remaining Time First (SRTF)',\n    value: 'SRTF'\n  },\n  {\n    label: 'Round Robin (RR)',\n    value: 'RR'\n  },\n  {\n    label: 'Two-Level FCFS',\n    value: 'FCFS2'\n  }\n];\n\nexport const timelineOptions = [\n  '1,4;4,2;2,3;13,2;2,4;6,1;1,9;0,2;9,2;4,5',\n  '0,11;2,8;4,5;6,2;8,2;10,1',\n  '1,10;4,2;12,3;13,2',\n  'custom'\n];\n\nexport const colors = [\n  '#e6194b',\n  '#3cb44b',\n  '#ffe119',\n  '#4363d8',\n  '#f58231',\n  '#911eb4',\n  '#46f0f0',\n  '#f032e6',\n  '#bcf60c',\n  '#fabebe',\n  '#008080',\n  '#e6beff',\n  '#9a6324',\n  '#fffac8',\n  '#800000',\n  '#aaffc3',\n  '#808000',\n  '#ffd8b1',\n  '#000075',\n  '#808080'\n];\n","import React from 'react';\nimport classnames from 'classnames';\nimport { colors } from '../../utils/constants';\n\nimport styles from './block.module.scss';\n\nconst Block = ({ isInvisible, value, inbound, size }) => (\n  <div\n    className={classnames(styles.block, {\n      [styles.inbound]: inbound\n    })}\n    style={{\n      background: isInvisible ? 'transparent' : colors[value],\n      width: `${size}px`,\n      height: `${size}px`,\n      margin: `${size / 10}px`\n    }}\n  />\n);\n\nexport default Block;\n","import React from 'react';\n\nimport styles from './counter.module.scss';\n\nconst Counter = ({ count, waitTimes, started }) => (\n  <div className={styles.counter}>\n    <div>\n      tick count: <span className={styles.number}>{count}</span>\n    </div>\n    {waitTimes.length > 0 && (\n      <div className={styles.average}>\n        average wait time for process:{' '}\n        <span className={styles.number}>\n          {Math.round(waitTimes.reduce((total, num) => total + num, 0) / waitTimes.length * 1000) / 1000}\n        </span>\n      </div>\n    )}\n  </div>\n);\n\nexport default Counter;\n","import React, { useState, useEffect } from 'react';\n\nimport { Select, Button, Visualizer } from './components';\nimport { timelineOptions, algoOptions } from './utils/constants';\nimport styles from './App.module.scss';\n\nconst App = () => {\n  const [algo, setAlgo] = useState('FCFS');\n  const [timeline, setTimeline] = useState(timelineOptions[0]);\n  const [started, setStarted] = useState(false);\n\n  const [customTimeline, setCustomTimeline] = useState('0,0');\n  const [error, setError] = useState('');\n\n  const onCustomTimelineChange = value => {\n    try {\n      if (value) {\n        value.split(';').map(job => {\n          const blocks = job.split(',');\n          if (blocks.length !== 2) {\n            throw new Error('Invalid timeline!');\n          }\n          return null;\n        });\n        setCustomTimeline(value);\n      }\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  useEffect(() => {\n    setError('');\n  }, [timeline, customTimeline]);\n\n  useEffect(() => {\n    if (timeline !== 'custom') setCustomTimeline('0,0');\n  }, [timeline]);\n\n  return (\n    <div className={styles.scheduler}>\n      <header className={styles.header}>\n        <h1 className={styles.title}>CPU scheduler</h1>\n        <div className={styles.controls}>\n          <div className={styles.timeline}>\n            <h3>Process timeline</h3>\n            <Select\n              options={timelineOptions}\n              onChange={({ target: { value } }) => {\n                setTimeline(value);\n                setStarted(false);\n              }}\n            />\n            {timeline === 'custom' && (\n              <input\n                className={styles.customTimeline}\n                onBlur={e => onCustomTimelineChange(e.target.value)}\n                onKeyPress={e => {\n                  if (e.key === 'Enter') {\n                    onCustomTimelineChange(e.target.value);\n                  }\n                }}\n              />\n            )}\n          </div>\n          <div className={styles.algo}>\n            <h3>Algorithm</h3>\n            <Select\n              options={algoOptions}\n              onChange={({ target: { value } }) => {\n                setAlgo(value);\n                setStarted(false);\n              }}\n            />\n          </div>\n        </div>\n        <Button\n          disabled={!!error}\n          label={started ? 'STOP' : 'START'}\n          onClick={() => {\n            if (started) {\n              setStarted(false);\n            } else {\n              setStarted(true);\n            }\n          }}\n        />\n        {error && <span className={styles.error}>{error}</span>}\n      </header>\n      <Visualizer\n        algo={algo}\n        timeline={timeline === 'custom' ? customTimeline : timeline}\n        started={started}\n        setStarted={setStarted}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}